import numpy as np
from verify import verify_sq

SAFETY_TABLE = [
    0,  0,   1,   2,   3,   5,   7,   9,  12,  15,
  18,  22,  26,  30,  35,  39,  44,  50,  56,  62,
  68,  75,  82,  85,  89,  97, 105, 113, 122, 131,
  140, 150, 169, 180, 191, 202, 213, 225, 237, 248,
  260, 272, 283, 295, 307, 319, 330, 342, 354, 366,
  377, 389, 401, 412, 424, 436, 448, 459, 471, 483,
  494, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  500, 500, 500, 500, 500, 500, 500, 500, 500, 500
]

PIECE_SQUARE_TABLE_MG = {
    'p':[
         0,  0,  0,  0,  0,  0,  0,  0,
         50, 50, 50, 50, 50, 50, 50, 50,
         10, 10, 20, 30, 30, 20, 10, 10,
          5,  5, 10, 27, 27, 10,  5,  5,
          0,  0,  0, 25, 25,  0,  0,  0,
          5, -5,-10,  0,  0,-10, -5,  5,
          5, 10, 10,-25,-25, 10, 10,  5,
          0,  0,  0,  0,  0,  0,  0,  0
    ],

    'N':[
         -50,-40,-30,-30,-30,-30,-40,-50,
         -40,-20,  0,  0,  0,  0,-20,-40,
         -30,  0, 10, 15, 15, 10,  0,-30,
         -30,  5, 15, 20, 20, 15,  5,-30,
         -30,  0, 15, 20, 20, 15,  0,-30,
         -30,  5, 10, 15, 15, 10,  5,-30,
         -40,-20,  0,  5,  5,  0,-20,-40,
         -50,-40,-20,-30,-30,-20,-40,-50,
    ],

    'B':[
         -20,-10,-10,-10,-10,-10,-10,-20,
         -10,  0,  0,  0,  0,  0,  0,-10,
         -10,  0,  5, 10, 10,  5,  0,-10,
         -10,  5,  5, 10, 10,  5,  5,-10,
         -10,  0, 10, 10, 10, 10,  0,-10,
         -10, 10, 10, 10, 10, 10, 10,-10,
         -10,  5,  0,  0,  0,  0,  5,-10,
         -20,-10,-40,-10,-10,-40,-10,-20,
    ],

    'R':[
            35,  29,  33,   4,  37,  33,  56,  50,
            55,  29,  56,  67,  55,  62,  34,  60,
            19,  35,  28,  33,  45,  27,  25,  15,
             0,   5,  16,  13,  18,  -4,  -9,  -6,
           -28, -35, -16, -21, -13, -29, -46, -30,
           -42, -28, -42, -25, -25, -35, -26, -46,
           -53, -38, -31, -26, -29, -43, -44, -53,
           -30, -24, -18,   5,  -2, -18, -31, -32
    ],

    'Q':[
            6,   1,  -8,-104,  69,  24,  88,  26,
            14,  32,  60, -10,  20,  76,  57,  24,
            -2,  43,  32,  60,  72,  63,  43,   2,
             1, -16,  22,  17,  25,  20, -13,  -6,
           -14, -15,  -2,  -5,  -1, -10, -20, -22,
           -30,  -6, -13, -11, -16, -11, -16, -27,
           -36, -18,   0, -19, -15, -15, -21, -38,
           -39, -30, -31, -13, -31, -36, -34, -42
    ],

    'K':[
            4,  54,  47, -99, -99,  60,  83, -62,
           -32,  10,  55,  56,  56,  55,  10,   3,
           -62,  12, -57,  44, -67,  28,  37, -31,
           -55,  50,  11,  -4, -19,  13,   0, -49,
           -55, -43, -52, -28, -51, -47,  -8, -50,
           -47, -42, -43, -79, -64, -32, -29, -32,
            -4,   3, -14, -50, -57, -18,  13,   4,
            17,  30,  -3, -14,   6,  -1,  40,  18
    ]
}

PIECE_SQUARE_TABLE_EG = {
    'p':[
        0,   0,   0,   0,   0,   0,   0,   0,
        -6,  -4,   1,   1,   1,   1,  -4,  -6,
        -6,  -4,   1,   2,   2,   1,  -4,  -6,
        -6,  -4,   2,   8,   8,   2,  -4,  -6,
        -6,  -4,   5,  10,  10,   5,  -4,  -6,
        -4,  -4,   1,   5,   5,   1,  -4,  -4,
        -6,  -4,   1, -24,  -24,  1,  -4,  -6,
        0,   0,   0,   0,   0,   0,   0,   0
    ],

    'N':[
        -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,
        -8,   0,   0,   0,   0,   0,   0,  -8,
        -8,   0,   4,   4,   4,   4,   0,  -8,
        -8,   0,   4,   8,   8,   4,   0,  -8,
        -8,   0,   4,   8,   8,   4,   0,  -8,
        -8,   0,   4,   4,   4,   4,   0,  -8,
        -8,   0,   1,   2,   2,   1,   0,  -8,
        -8, -12,  -8,  -8,  -8,  -8, -12,  -8
    ],

    'B':[
        -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,
        -4,   0,   0,   0,   0,   0,   0,  -4,
        -4,   0,   2,   4,   4,   2,   0,  -4,
        -4,   0,   4,   6,   6,   4,   0,  -4,
        -4,   0,   4,   6,   6,   4,   0,  -4,
        -4,   1,   2,   4,   4,   2,   1,  -4,
        -4,   2,   1,   1,   1,   1,   2,  -4,
        -4,  -4, -12,  -4,  -4, -12,  -4,  -4
    ],

    'R':[
        5,   5,   5,   5,   5,   5,   5,   5,
        20,  20,  20,  20,  20,  20,  20,  20,
        -5,   0,   0,   0,   0,   0,   0,  -5,
        -5,   0,   0,   0,   0,   0,   0,  -5,
        -5,   0,   0,   0,   0,   0,   0,  -5,
        -5,   0,   0,   0,   0,   0,   0,  -5,
        -5,   0,   0,   0,   0,   0,   0,  -5,
        0,   0,   0,   2,   2,   0,   0,   0
    ],

    'Q':[
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 1, 1, 0, 0,
        0, 0, 1, 2, 2, 1, 0, 0,
        0, 0, 2, 3, 3, 2, 0, 0,
        0, 0, 2, 3, 3, 2, 0, 0,
        0, 0, 1, 2, 2, 1, 0, 0,
        0, 0, 1, 1, 1, 1, 0, 0,
        -5, -5, -5, -5, -5, -5, -5, -5
    ],

    'K':[
        -72, -48, -36, -24, -24, -36, -48, -72,
        -48, -24, -12,   0,   0, -12, -24, -48,
        -36, -12,   0,  12,  12,   0, -12, -36,
        -24,   0,  12,  24,  24,  12,   0, -24,
        -24,   0,  12,  24,  24,  12,   0, -24,
        -36, -12,   0,  12,  12,   0, -12, -36,
        -48, -24, -12,   0,   0, -12, -24, -48,
        -72, -48, -36, -24, -24, -36, -48, -72
    ]
}

direction_table = {
    (1, 0),
    (-1, 0),
    (0, 1),
    (0, -1),
    (-1, 1),
    (1, -1),
    (-1, -1),
    (1, 1),
}

class setBasicValues:
    def __init__(self) -> None:        

        self.piece_value = {'p': 100, 'N': 280, 'B': 320, 'R': 479, 'Q': 929, 'K': 0}

        # pair bonus
        self.bishop_pair = 30
        self.knight_pair = 0
        self.rook_pair = 16

        # minor bonus
        self.rook_open = 10
        self.rook_half = 5
        self.returning_bishop = 20
        self.fianchetto = 4
        self.tempo = 10

        self.sq_near_k = {}
        self.sq_near_k['w'] = np.zeros((8, 8))
        self.sq_near_k['b'] = np.zeros((8, 8))

        self.safety_table = SAFETY_TABLE
        self.psqt_mg = PIECE_SQUARE_TABLE_MG
        self.psqt_eg = PIECE_SQUARE_TABLE_EG

        self.weak_pawn = [ 
            0,   0,   0,   0,   0,   0,   0,   0,
          -10, -12, -14, -16, -16, -14, -12, -10,
          -10, -12, -14, -16, -16, -14, -12, -10,
          -10, -12, -14, -16, -16, -14, -12, -10,
          -10, -12, -14, -16, -16, -14, -12, -10,
          -8, -12, -14, -16, -16, -14, -12, -10,
          -8, -12, -14, -16, -16, -14, -12, -10,
          0,   0,   0,   0,   0,   0,   0,   0
        ]

        self.passed_pawn = [
            0,   0,   0,   0,   0,   0,   0,   0,
            100, 100, 100, 100, 100, 100, 100, 100,
            80,  80,  80,  80,  80,  80,  80,  80,
            60,  60,  60,  60,  60,  60,  60,  60,
            40,  40,  40,  40,  40,  40,  40,  40,
            20,  20,  20,  20,  20,  20,  20,  20,
            20,  20,  20,  20,  20,  20,  20,  20,
            0,   0,   0,   0,   0,   0,   0,   0
        ]

        self.protected_passer = np.zeros(64)
        self.init_tables()

    def set_squares_near_king(self, state):
        wkl = state.whiteKingLocation
        bkl = state.blackKingLocation
        for direction in direction_table:
            wkrow = wkl[0] + direction[0]
            wkcol = wkl[1] + direction[1]
            bkrow = bkl[0] + direction[0]
            bkcol = bkl[1] + direction[1]
            if verify_sq(wkrow, wkcol):
                self.sq_near_k['w'][wkrow][wkcol] = 1
            if verify_sq(bkrow, bkcol):
                self.sq_near_k['b'][bkrow][bkcol] = 1

    def init_tables(self):
        for i in range(64):
            self.protected_passer[i] = (self.passed_pawn[i] * 10) // 8
