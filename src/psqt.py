import numpy as np
from verification_util import verify_sq

MVV_LVA = [
    [0, 0, 0, 0, 0, 0, 0],
    [50, 51, 52, 53, 54, 55, 0],
    [40, 41, 42, 43, 44, 45, 0],
    [30, 31, 32, 33, 34, 35, 0],
    [20, 21, 22, 23, 24, 25, 0],
    [10, 11, 12, 13, 14, 15, 0],
    [0, 0, 0, 0, 0, 0, 0],
]

INDEX_MVV_LVA = {
    'K':0,
    'Q':1,
    'R':2,
    'B':3,
    'N':4,
    'p':5,
    '-':6
}

SAFETY_TABLE = [
    0,  0,   1,   2,   3,   5,   7,   9,  12,  15,
  18,  22,  26,  30,  35,  39,  44,  50,  56,  62,
  68,  75,  82,  85,  89,  97, 105, 113, 122, 131,
  140, 150, 169, 180, 191, 202, 213, 225, 237, 248,
  260, 272, 283, 295, 307, 319, 330, 342, 354, 366,
  377, 389, 401, 412, 424, 436, 448, 459, 471, 483,
  494, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
  500, 500, 500, 500, 500, 500, 500, 500, 500, 500
]

PIECE_SQUARE_TABLE_MG = {
    'p':[
        0,   0,   0,   0,   0,   0,   0,   0,
        -6,  -4,   1,   1,   1,   1,  -4,  -6,
        -6,  -4,   1,   2,   2,   1,  -4,  -6,
        -6,  -4,   2,   8,   8,   2,  -4,  -6,
        -6,  -4,   5,  10,  10,   5,  -4,  -6,
        -4,  -4,   1,   5,   5,   1,  -4,  -4,
        -6,  -4,   1, -24,  -24,  1,  -4,  -6,
        0,   0,   0,   0,   0,   0,   0,   0

    ],

    'N':[
        -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,
        -8,   0,   0,   0,   0,   0,   0,  -8,
        -8,   0,   4,   4,   4,   4,   0,  -8,
        -8,   0,   4,   8,   8,   4,   0,  -8,
        -8,   0,   4,   8,   8,   4,   0,  -8,
        -8,   0,   4,   4,   4,   4,   0,  -8,
        -8,   0,   1,   2,   2,   1,   0,  -8,
        -8, -12,  -8,  -8,  -8,  -8, -12,  -8        
    ],

    'B':[
        -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,
        -4,   0,   0,   0,   0,   0,   0,  -4,
        -4,   0,   2,   4,   4,   2,   0,  -4,
        -4,   0,   4,   6,   6,   4,   0,  -4,
        -4,   0,   4,   6,   6,   4,   0,  -4,
        -4,   1,   2,   4,   4,   2,   1,  -4,
        -4,   2,   1,   1,   1,   1,   2,  -4,
        -4,  -4, -12,  -4,  -4, -12,  -4,  -4
    ],

    'R':[
        5,   5,   5,   5,   5,   5,   5,   5,
        20,  20,  20,  20,  20,  20,  20,  20,
        -5,   0,   0,   0,   0,   0,   0,  -5,
        -5,   0,   0,   0,   0,   0,   0,  -5,
        -5,   0,   0,   0,   0,   0,   0,  -5,
        -5,   0,   0,   0,   0,   0,   0,  -5,
        -5,   0,   0,   0,   0,   0,   0,  -5,
        0,   0,   0,   2,   2,   0,   0,   0
    ],

    'Q':[
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 1, 1, 0, 0,
        0, 0, 1, 2, 2, 1, 0, 0,
        0, 0, 2, 3, 3, 2, 0, 0,
        0, 0, 2, 3, 3, 2, 0, 0,
        0, 0, 1, 2, 2, 1, 0, 0,
        0, 0, 1, 1, 1, 1, 0, 0,
        -5, -5, -5, -5, -5, -5, -5, -5
    ],

    'K':[
        -40, -30, -50, -70, -70, -50, -30, -40,
        -30, -20, -40, -60, -60, -40, -20, -30,
        -20, -10, -30, -50, -50, -30, -10, -20,
        -10,   0, -20, -40, -40, -20,   0, -10,
        0,  10, -10, -30, -30, -10,  10,   0,
        10,  20,   0, -20, -20,   0,  20,  10,
        30,  40,  20,   0,   0,  20,  40,  30,
        40,  50,  30,  10,  10,  30,  50,  40
    ]
}

PIECE_SQUARE_TABLE_EG = {
    'p':[
        0,   0,   0,   0,   0,   0,   0,   0,
        -6,  -4,   1,   1,   1,   1,  -4,  -6,
        -6,  -4,   1,   2,   2,   1,  -4,  -6,
        -6,  -4,   2,   8,   8,   2,  -4,  -6,
        -6,  -4,   5,  10,  10,   5,  -4,  -6,
        -4,  -4,   1,   5,   5,   1,  -4,  -4,
        -6,  -4,   1, -24,  -24,  1,  -4,  -6,
        0,   0,   0,   0,   0,   0,   0,   0
    ],

    'N':[
        -8,  -8,  -8,  -8,  -8,  -8,  -8,  -8,
        -8,   0,   0,   0,   0,   0,   0,  -8,
        -8,   0,   4,   4,   4,   4,   0,  -8,
        -8,   0,   4,   8,   8,   4,   0,  -8,
        -8,   0,   4,   8,   8,   4,   0,  -8,
        -8,   0,   4,   4,   4,   4,   0,  -8,
        -8,   0,   1,   2,   2,   1,   0,  -8,
        -8, -12,  -8,  -8,  -8,  -8, -12,  -8
    ],

    'B':[
        -4,  -4,  -4,  -4,  -4,  -4,  -4,  -4,
        -4,   0,   0,   0,   0,   0,   0,  -4,
        -4,   0,   2,   4,   4,   2,   0,  -4,
        -4,   0,   4,   6,   6,   4,   0,  -4,
        -4,   0,   4,   6,   6,   4,   0,  -4,
        -4,   1,   2,   4,   4,   2,   1,  -4,
        -4,   2,   1,   1,   1,   1,   2,  -4,
        -4,  -4, -12,  -4,  -4, -12,  -4,  -4
    ],

    'R':[
        5,   5,   5,   5,   5,   5,   5,   5,
        20,  20,  20,  20,  20,  20,  20,  20,
        -5,   0,   0,   0,   0,   0,   0,  -5,
        -5,   0,   0,   0,   0,   0,   0,  -5,
        -5,   0,   0,   0,   0,   0,   0,  -5,
        -5,   0,   0,   0,   0,   0,   0,  -5,
        -5,   0,   0,   0,   0,   0,   0,  -5,
        0,   0,   0,   2,   2,   0,   0,   0
    ],

    'Q':[
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 1, 1, 0, 0,
        0, 0, 1, 2, 2, 1, 0, 0,
        0, 0, 2, 3, 3, 2, 0, 0,
        0, 0, 2, 3, 3, 2, 0, 0,
        0, 0, 1, 2, 2, 1, 0, 0,
        0, 0, 1, 1, 1, 1, 0, 0,
        -5, -5, -5, -5, -5, -5, -5, -5
    ],

    'K':[
        -72, -48, -36, -24, -24, -36, -48, -72,
        -48, -24, -12,   0,   0, -12, -24, -48,
        -36, -12,   0,  12,  12,   0, -12, -36,
        -24,   0,  12,  24,  24,  12,   0, -24,
        -24,   0,  12,  24,  24,  12,   0, -24,
        -36, -12,   0,  12,  12,   0, -12, -36,
        -48, -24, -12,   0,   0, -12, -24, -48,
        -72, -48, -36, -24, -24, -36, -48, -72
    ]
}

direction_table = {
    (1, 0),
    (-1, 0),
    (0, 1),
    (0, -1),
    (-1, 1),
    (1, -1),
    (-1, -1),
    (1, 1),
}

class setBasicValues:
    def __init__(self) -> None:        
        self.piece_value = {
            "K": 0,
            'Q': 975,
            'R': 500,
            'B': 335,
            'N': 325,
            'p': 100,
        }

        # pair bonus
        self.bishop_pair = 30
        self.knight_pair = 0
        self.rook_pair = 16

        # minor bonus
        self.rook_open = 10
        self.rook_half = 5
        self.returning_bishop = 20
        self.fianchetto = 4
        self.tempo = 10

        self.sq_near_k = {}
        self.sq_near_k['w'] = np.zeros((8, 8))
        self.sq_near_k['b'] = np.zeros((8, 8))

        self.safety_table = SAFETY_TABLE
        self.psqt_mg = PIECE_SQUARE_TABLE_MG
        self.psqt_eg = PIECE_SQUARE_TABLE_EG

        self.weak_pawn = [ 
            0,   0,   0,   0,   0,   0,   0,   0,
          -10, -12, -14, -16, -16, -14, -12, -10,
          -10, -12, -14, -16, -16, -14, -12, -10,
          -10, -12, -14, -16, -16, -14, -12, -10,
          -10, -12, -14, -16, -16, -14, -12, -10,
          -8, -12, -14, -16, -16, -14, -12, -10,
          -8, -12, -14, -16, -16, -14, -12, -10,
          0,   0,   0,   0,   0,   0,   0,   0
        ]

        self.passed_pawn = [
            0,   0,   0,   0,   0,   0,   0,   0,
            100, 100, 100, 100, 100, 100, 100, 100,
            80,  80,  80,  80,  80,  80,  80,  80,
            60,  60,  60,  60,  60,  60,  60,  60,
            40,  40,  40,  40,  40,  40,  40,  40,
            20,  20,  20,  20,  20,  20,  20,  20,
            20,  20,  20,  20,  20,  20,  20,  20,
            0,   0,   0,   0,   0,   0,   0,   0
        ]

        self.protected_passer = np.zeros(64)
        self.init_tables()

    def set_squares_near_king(self, state):
        wkl = state.whiteKingLocation
        bkl = state.blackKingLocation
        for direction in direction_table:
            wkrow = wkl[0] + direction[0]
            wkcol = wkl[1] + direction[1]
            bkrow = bkl[0] + direction[0]
            bkcol = bkl[1] + direction[1]
            if verify_sq(wkrow, wkcol):
                self.sq_near_k['w'][wkrow][wkcol] = 1
            if verify_sq(bkrow, bkcol):
                self.sq_near_k['b'][bkrow][bkcol] = 1

    def init_tables(self):
        for i in range(64):
            self.protected_passer[i] = (self.passed_pawn[i] * 10) // 8
